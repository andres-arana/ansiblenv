" *****************************************************************************
" PLUGINS
" *****************************************************************************
call plug#begin('~/.vim/plugged')
let g:plug_timeout=900
nnoremap <leader>pi :PlugInstall<cr>
nnoremap <leader>pu :PlugUpdate<cr>
nnoremap <leader>pg :PlugUpgrade<cr>
nnoremap <leader>pc :PlugClean<cr>

" -----------------------------------------------------------------------------
" GENERAL UTILITIES
" -----------------------------------------------------------------------------
" Paired mappings
Plug 'tpope/vim-unimpaired'
" Repeat complex commands with .
Plug 'tpope/vim-repeat'
" Sensible defaults and tools for netrw
Plug 'tpope/vim-vinegar'

" -----------------------------------------------------------------------------
" NAVIGATION
" -----------------------------------------------------------------------------
" Quick mark navigation
Plug 'kshenoy/vim-signature'
" Fuzzy navigation
Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
nnoremap <leader>zF :Files!<cr>
nnoremap <leader>zf :GFiles!<cr>
nnoremap <leader>zg :Ag!
nnoremap <leader>z: :History:!<cr>
nnoremap <leader>z/ :History/!<cr>
nnoremap <leader>zm :Marks!<cr>
nnoremap <leader>zc :Commands!<cr>
nnoremap <leader>zl :Filetypes!<cr>
nnoremap <leader>zh :Helptags<cr>

" -----------------------------------------------------------------------------
" UI
" -----------------------------------------------------------------------------
" Color scheme
Plug 'morhetz/gruvbox'
let g:gruvbox_italic=1
" Powerful status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1
" Indentation lines
Plug 'nathanaelkane/vim-indent-guides'
" Delimiter matching
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

" -----------------------------------------------------------------------------
" TMUX
" -----------------------------------------------------------------------------
" Easy tmux navigation
Plug 'christoomey/vim-tmux-navigator'
Plug 'benmills/vimux'
nnoremap <leader>vp :VimuxPromptCommand<cr>
nnoremap <leader>vl :VimuxRunLastCommand<cr>
nnoremap <leader>vc :VimuxCloseRunner<cr>
nnoremap <leader>vz :VimuxZoomRunner<cr>
nnoremap <leader>vi :VimuxInspectRunner<cr>
nnoremap <leader>vx :VimuxInterruptRunner<cr>
" Tmux config file editing
Plug 'tmux-plugins/vim-tmux'

" -----------------------------------------------------------------------------
" TEXT EDITING
" -----------------------------------------------------------------------------
" Comment and uncomment code
Plug 'tpope/vim-commentary'
" Smart delimiters
Plug 'cohama/lexima.vim'
" Surround expressions
Plug 'tpope/vim-surround'
" Argument shuffling
Plug 'PeterRincker/vim-argumentative'
" Entire file text object
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
" Aligning and table management
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" -----------------------------------------------------------------------------
" LANGUAGES
" -----------------------------------------------------------------------------
" Syntax pack
Plug 'sheerun/vim-polyglot'

" -----------------------------------------------------------------------------
" DEVELOPMENT
" -----------------------------------------------------------------------------
" Development tools
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_disable_startup_warning = 1
let g:coc_global_extensions = [
  \ 'coc-json',
  \ 'coc-yaml',
  \ 'coc-ultisnips',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-pyright',
  \ 'coc-vimlsp',
  \ ]
" Diagnostics navigation
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
" Refactoring tools
nmap <leader>rn <Plug>(coc-rename)
nmap <silent>   <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent>   <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent>   <leader>r  <Plug>(coc-codeaction-refactor-selected)
" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Code actions
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>ac <Plug>(coc-codeaction-cursor)
nmap <leader>as  <Plug>(coc-codeaction-source)
" Text objects
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)
" Snippets
Plug 'SirVer/ultisnips'
let g:UltiSnipsSnippetsDir = '~/.vim/ultisnips'
let g:UltiSnipsSnippetDirectories=['ultisnips']
let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
nnoremap <leader>s :UltiSnipsEdit<cr>
" Fast expansion for html tags
Plug 'mattn/emmet-vim'

call plug#end()

" *****************************************************************************
" Internal optional plugins
" *****************************************************************************
packadd! matchit

" *****************************************************************************
" Internal plugin configurations
" *****************************************************************************
" Netrw
let g:netrw_banner=0
" Disable C-l refresh mapping on netrw as it messes up tmux navigation AND you
" can refresh by either running `:e .` or opening the `.` directory in netrw
function s:RemoveNetrwMap()
  if hasmapto('<Plug>NetrwRefresh')
    unmap <buffer> <C-l>
  endif
endfunction
autocmd FileType netrw call s:RemoveNetrwMap()
autocmd FileType netrw set nolist

" *****************************************************************************
" INTERNAL MAPPINGS
" *****************************************************************************
" Use space as a leader alias
map <space> <leader>
" Remove annoying mappings
nnoremap <F1> <nop>
" Fast macros
nnoremap Q @q
" Make Y consistent
nnoremap Y y$
" Quickly edit vim settings
nnoremap <leader>ct :tabedit $MYVIMRC<cr>
nnoremap <leader>ce :edit $MYVIMRC<cr>
nnoremap <leader>cv :vsplit $MYVIMRC<cr>
nnoremap <leader>cs :split $MYVIMRC<cr>
nnoremap <leader>cr :so $MYVIMRC<cr>

" *****************************************************************************
" VIM SETTINGS
" *****************************************************************************
" Allow backspacing over everything in insert mode
set backspace=indent,eol,start
" Add more space in the command area
set cmdheight=2
" Set update time to 300ms for more responsive interaction
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Merge sign column and number column
set signcolumn=number
" Show line numbers
set number
" Display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅
" Search options
set incsearch
set smartcase
" Line wrapping
set wrap
set linebreak
" Turn off swap file, backups and other inconvenient files
set noswapfile
set nobackup
set nowb
" Undo settings
set undodir=~/.vim/undofiles
set undofile
" Info file
set viminfo+=n~/.vim/viminfo
" Default indent settings
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
" Folding settings
set nofoldenable
set foldmethod=syntax
" Conceal settings
set conceallevel=0
" Wild list
set wildmode=list:longest
set wildmenu
set wildignore=*.o,*.obj,*~
" Vertical/horizontal scroll off settings
set scrolloff=3
set sidescrolloff=7
set sidescroll=1
" Load ftplugin and indent files
filetype plugin indent on
" Turn on syntax highlighting
syntax on
" Hide buffers when not displayed
set hidden
" Allow visual block mode on empty chars
set virtualedit=block
" Set unicode encoding
set encoding=utf-8
" Always display the status line
set laststatus=2
" Enable the cursor line
set cursorline
set cursorcolumn
" Enable case-ignoring search everywhere
set ignorecase
" Enable recursive path traversal
set keywordprg=:help
" Enable spell checking
set spelllang=en_us,es_mx

" *****************************************************************************
" VIM UI SETTINGS
" *****************************************************************************
" Disable the bell sounds
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
" UI settings and color scheme
set go=
set gfn=JetBrainsMono\ Nerd\ Font\ Mono\ Medium\ 9
" Workaround broken undercurls
let &t_Cs = "\e[4:3m"
let &t_Ce = "\e[4:0m"
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
set background=dark
colorscheme gruvbox
